#include <iostream>
#include <vector>
#include <iomanip>
#include <cmath>    
#include <random>

using namespace std;

class Matrizes{
    public:
    int linhas;
    int colunas;
    

    void determinante(int matriz, int tamanho){
        int det = 0;
        if (tamanho ==1){
            det = matriz[0][0];
        } else { if (tamanho == 2){
            det = matriz[0][0] * matriz[1][1] - matriz[0][1] * matriz[1][0];}
        }else if (tamanho == 3){
            det = matriz[0][0] * (matriz[1][1] * matriz[2][2] - matriz[1][2] * matriz[2][1]) -
                  matriz[0][1] * (matriz[1][0] * matriz[2][2] - matriz[1][2] * matriz[2][0]) +
                  matriz[0][2] * (matriz[1][0] * matriz[2][1] - matriz[1][1] * matriz[2][0]);
        }
    }

    double determinante_lap(const vector<vector<double>>& matriz) {
    int n = matriz.size(); // ordem da matriz

    // Caso base: matriz 1x1
    if (n == 1)
        return matriz[0][0];

    // Caso base: matriz 2x2
    if (n == 2)
        return matriz[0][0] * matriz[1][1] - matriz[0][1] * matriz[1][0];

    double det = 0.0;

    // Expansão pela primeira linha (linha 0)
    for (int j = 0; j < n; j++) {
        // Criar a matriz menor (removendo linha 0 e coluna j)
        vector<vector<double>> menor(n - 1, vector<double>(n - 1));
        for (int i = 1; i < n; i++) {
            int col_menor = 0;
            for (int k = 0; k < n; k++) {
                if (k == j) continue; // pula a coluna j
                menor[i - 1][col_menor] = matriz[i][k];
                col_menor++;
            }
        }

        // Cálculo do cofator
        double cofator = ((j % 2 == 0) ? 1 : -1) * matriz[0][j];

        // Soma com o determinante da matriz menor
        det += cofator * determinante_Lap(menor);
    }

    return det;
}
};

class manipulando_Vetores {
    public:
    vector<int> A;
    vector<int> B;
    int tamanho = 3; //tamanho padrao

    void ortogonalidade(int tamanho , vector<int> A, vector<int> B){
        int produto = 0;
        for(int i =0; i<tamanho;i++){
            produto += A[i] * B[i] ;
        }
        if (produto == 0){
            cout << "Os vetores sao ortogonais" << endl;
        }else{
            cout << "Os vetores nao sao ortogonais" << endl;
        }
    }
    void Produto_misto(vector<int> A, vector<int> B, vector<int> C){
    const int tamanho = 3;
    vector<int> resultado(tamanho);
    for (int i = 0; i < tamanho; i++) {
        resultado[i] = A[i] * B[i] + C[i];
    }
    cout << "Resultado do produto misto: ";
    for (int i = 0; i < tamanho; i++) {
        cout << resultado[i] << " ";
    }
    cout << endl;
}
};

int main(){
    const int tamanho = 3;
    std::vector<int> B{1, 2, 3};
    std::vector<int> A{4, 5, 6};   
    std::vector<int> C{1, 1, 1}

    int linhas = colunas = 3;
    int matriz[linhas][colunas];

    Vetor = manipulando_Vetores();
    //gerando uma matriz 3x3
    for (int i = 0; i<tamanho; j++){
        for (int j = 0; j<tamanho; j++){
            matriz[i][j] = rand() % 10; // numeros aleatorios de 0 a 9
        }
    }
    for (l = 0 ; l<linhas; l++){
        for (c = 0; c<colunas; c++){
            cout << matriz[l][c] << " ";
        }
        cout << endl;
    }
    //calculando o produto misto e verificando se é dois vetores são ortogonais.
    Vetor.ortogonalidade(tamanho, A, B);
    Vetor.Produto_misto(A, B, C);

}
